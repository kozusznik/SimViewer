All units are in the SI units or derived.
Pixel distances or similar quantities are forbidden.


------------------------------------------------------------------------------
AbstractAgent:
- collection of virtual functions that cover minimal functionality
  required for the simulation, see below

timeDelta - a period of time that one round is simulating
          - does not necessary has to be the same as time span
			   between (global) time points -- allows some agents
				to be executed/simulated more rapidly than the whole
				simulation is evolving; or even more slowly (e.g.
				the guiding geometry hinter might have only a few updates
				in the course of the simulation; but then it must have
				empty AdjustGeometryByExtForces() (because scene is not
				static within its long timeDelta))

timeLocal - how old is this agent

One simulation round is to call the following a,b,c,d functions.
They represent timeDelta amount of time that this agent "grows older",
that is, timeLocal increases by timeDelta _after_ this round.
The rounds are executed as long as timeLocal < timeGlobal, the latter
is the global (wall) time that associated FO knows.

a: AdvanceAndBuildIntForces()
b: AdjustGeometryByIntForces()

c: CollectExtForces()
d: AdjustGeometryByExtForces()

[
Matching against TRAgen:
a,b - Cell::adjustShape()
c   - Cell::calculateForces()
d   - Cell::applyForces()

Matching against ICIP2018 (multicell filo, submitted)
a,b - unconstrained dynamics
c   - collision detection
d   - collision response

Matching against MitoGen:
a,b - internal development of the cell: texture & shape
c   - Cell::ScmUniversalMovement()
d   - Cell::...applyFF()...

'a','b' are designed separable so that one can use the same mechanism
to adjust shape if one wants so -- in which case one would create
AdjustGeometryByForces() and would call it from both 'b' and 'd'.
|
For "simple" simulations, one would often do shape change already in 'a' and
would leave 'b' just empty.
]


attributes to store simplified geometry for GetSimplifiedGeometry()
attributes to store necessary-detailed geometry for the simulation
(the previous attributes are "subset" of these)

GetAABB() - returns the current axis-aligned bounding box that embodies
            the current geometry of the agent; Dirigent will want to know
				to provide appropriately sized and positioned Image3d to be filled

GetSimplifiedGeometry() - returns the geometry, the simplified version, that everybody
                          else can use to test for collisions (also the one that is copied
							     into neighboring FOs/tiles for shadowing); this is typically
							     the geometry that was valid at timeGlobal of my FO; after FO
							     advances into another revision, calls my AdvanceSimplifiedGeometry()
AdvanceSimplifiedGeometry() - updates what GetSimplifiedGeometry() reports with my latest
                              geometry; this is typically what I have by now, which at
									   my timeLocal > FO's timeGlobal; NB: if my timeLocal == FO's timeGlobal
									   then it means that I haven't yet simulated anything


DrawMask(AbstractDisplayUnit) - renders the current geometry of the agent into the AbstractDisplayUnit,
                                the unit offers a limited collection of graphics primitives
DrawMask(Image3d)             - rasterizes the current geometry of the agent into the image,
                                the image recognizes voxel resolution and offset (coordinate interval)
DrawTexture(AbstractDisplayUnit) - the same but for the texture
DrawTexture(Image3d)

DrawDebugMask(AbstractDisplayUnit)  shall we?
DrawDebugMask(Image3d)              shall we?

[these are for the Dirigent to build the simulated images,
 there can be other drawers to feed dedicated GlobalAgent agents]


------------------------------------------------------------------------------
Agent:
- one element of the simulation, can be advanced in time
- has neccessary attributes and functions to implement its simulation
- must store information about its geometry (shape & position) and texture

- allowed geometry representation for the purpose of collision detection
	- union of spheres
	- surface mesh
	- binary image
There will be 9 functions available to return distances for all 3x3 cases.          S M I
NB: Due to symmetry of the cases, only 3+3 functions required                     S H A B
NB: 3 for homogeneous situations: spheres vs. spheres etc. (H)                    M A H C
NB: 3 for rest: spheres vs. mesh (A), spheres vs. image (B), mesh vs. image (C)   I B C H

Hinting/driving (invisible) agents implement empty Draw*() functions.


------------------------------------------------------------------------------
AbstractDisplayUnit:
- collection of virtual functions to offer vector graphics drawing primitives
  that an agent can use to render itself

[the last param 'color' will have a default value 'black']
- DrawPoint(Vector3d pos, float radius, color)
- DrawLine(Vector3d a,Vector3d b, color)
- DrawVector(Vector3d pos,Vector3d v, color) - essentially a line with arrow
- DrawTriangle(Vector3d a,b,c, color)        - CCW order of vertices when looking at the front face


------------------------------------------------------------------------------
DisplayUnitS:
- this is essentially a broadcast repeater for primitives drawing commands
- extends AbstractDisplayUnit (to be able to be used instead of AbstractDisplayUnit)

- Draw*() - iterates over a list of registered drawers/displays and calls their Draw*() counterparts

- Register(AbstractDisplayUnit)
- UnRegister(AbstractDisplayUnit)


------------------------------------------------------------------------------
DisplayUnit:
- this is one particular implementation of the AbstractDisplayUnit
- Draw*() - implements the drawing in the specific display context,
            e.g. OpenGL, ZeroMQ feeder to some Java renderer/display


possible DisplayUnit implementation:
- Fiji/Java vector graphics rendering (Scenery, SciView) 
- rasterized into Fiji/Java volumetric rendering (VolView)
- rasterized into Fiji/Java plane-rendering (BDV)
- rasterized into a 3D image on disk (only emergency fall-back plan)
- console centre coordinates and/or AABB reporter - for plots
- console complete geometry (spheres only) reporter - for plots, for analyses







------------------------------------------------------------------------------
Work-load layout, overview:
It is based on the idea:
The whole scene is tiled (which is motivated by computational reasons).
Agent/cell belongs into exactly one tile. There is usually multiple agents in one tile.
The agents do not move often between tiles.
An agent can live at the tile border, and even physically extend out from the tile.
An agent is evaluated only against agents from the same and neighboring tiles!
What if agent is large (=larger than tile)?
Patch: design a global agent
 - that is associated with one FO -- this where simulation/evolution is computed,
 - whose (geometry only) copy available in every FO,
 - that comes in two flavours: with empty AdjustGeometryByExtForces()
   (consequently also empty CollectExtForces(); e.g. whole scene shape hinter)
	and without empty AdjustGeometryByExtForces() (is influenced by the current
	situation in the scene; e.g. whole scene chemotaxer); the former is is called
	(from agent's perspective) as GlobalROAgent, latter just GlobalAgent;
	filling GlobalAgent is essentially the same problem as filling the whole/global
	simulated scene -- so agents would need to provide their response to
	the GlobalAgent's associated FO in order to update it


Work-load layout, main actors:
Dirigent - the main maintainer & scheduler of the simulation, work coordinator, results collector

			Controlling the simulation (maintainance, work support):
			- tiles the global scene into "versioned work units" (without rollbacks)
				- one FO responsible for this tile (FO can supervise multiple tiles)
				- FO connection details
				- tile has a revision number (simulated time-step)
				- revision number only increases after a report from FO
         - frontend officers are commanded by the dirigent
			- listens to and receives reports/updates from all FOs
         - is always online -- can always hear from the FOs

			[advances (and synchronizes in this way) the simulation cycle -- necessary ??]
			- provides initial timeGlobal, timeDelta to FOs
			- revision number is actually timeGlobal and increases with timeDelta

			Reporting about the simulation (results/renderings collection):
			- maintains a list of cells/backend workers:
			    - their last reported status
				 - their last reported AABBs (position)
				 - their affiliation to frontend officer
			- listens to (additional dedicated port) and receives reports/updates from all backend workers
         - is always online -- can always hear from the workers
			- this is for constructing the simulated outputs, see DisplayUnit

			Controlling the dirigent:
			- regularly reads a command pipe (named pipe) to hear commands from an user
			  (e.g. connect_and_display/disconnect a display, report status/stats, pause/stop simulation)
			- can live on a laptop, and is commanded via GUI app (that feeds the command pipe)
			- can live on a server, and is commanded via the command pipe from (SSH) command line

Dirigent = global-scene director
Front Officers = local-scene directors, Front Officer = FO

Front Officer - is responsible for one or more tiles and makes sure its tiles advance into another revision
                (that is, all agents' timeLocal >= this FO's timeGlobal+timeDelta
					  and this FO's timeGlobal increases = advance into another revision)
				  - has (minimalistic) copies of all neighboring tiles (incl. geometries of their cells) at rev r.
				  - stores tile at rev. r, retrieves copies of neighboring tiles at rev. r, advances current tile, reports to dirigent
				  - supports for hand-over of cells between tiles (and FOs)

              - is a communication point between the dirigent and _local_ backend workers,
              - maintains a private list of threads, each thread being one backend worker

				  - has a local knowledge about spatial positions of simulated cells -- cells within the available tiles
				  - cells/workers query officer for geometries of other cells
				  - assumption: neighbors can come only from the current tile or some neighboring one

              - 1 front officer per 1 computer (1 IP address)
				  - is always online -- can always hear from the dirigent, receives updates


Backend Worker - realizes simulation of one cell, always the same cell
               - implements requests from the frontend officer -- commands to advance simulation
